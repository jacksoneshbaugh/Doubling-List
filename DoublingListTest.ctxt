#BlueJ class context
comment0.target=DoublingListTest
comment0.text=\n\ Test\ class\ for\ {@link\ DoublingList}.\n\ \n\ @author\ Jackson\ Eshbaugh\n\ @version\ 04/10/2024\n
comment1.params=
comment1.target=DoublingListTest()
comment10.params=
comment10.target=void\ testListIteratorPreviousAndHasPrevious()
comment10.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.previous()}\ and\ the\n\ {@code\ DoublingList.DoublingListIterator.hasPrevious()}\ methods.\n\ \n\ Iterates\ backwards\ through\ the\ list,\ checking\ that\ each\ call\ to\ {@code\ previous()}\ returns\ the\ expected\ value\ from\ the\ list.\n\ Also\ ensures\ {@code\ hasPrevious()}\ is\ accurate.\ Checks\ for\ a\ {@code\ NoSuchElementException}\ when\ expected.\n
comment11.params=
comment11.target=void\ testListIteratorNextIndexAndPreviousIndex()
comment11.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.nextIndex()}\ and\ the\n\ {@code\ DoublingList.DoublingListIterator.previousIndex()}\ methods.\n\ \n\ Iterates\ through\ the\ list,\ checking\ that\ each\ call\ to\ {@code\ nextIndex()}\ returns\ the\ expected\ index.\n\ Also\ ensures\ {@code\ previousIndex()}\ is\ accurate.\n
comment12.params=
comment12.target=void\ testListIteratorAdd()
comment12.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.add(E)}\ method.\n\ \n\ Adds\ items\ to\ the\ list,\ ensuring\ that\ {@code\ previous()}\ returns\ them.\n\ Tries\ adding\ a\ {@code\ null}\ value.\n
comment13.params=
comment13.target=void\ testListIteratorRemove()
comment13.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.remove()}\ method.\n\ \n\ Removes\ items\ from\ the\ list,\ ensuring\ that\ the\ correct\ items\ were\ removed\ based\ on\n\ which\ method\ was\ called\ first.\ Also\ tries\ to\ call\ {@code\ remove()}\ without\ calling\ a\ required\n\ method\ before.\n
comment14.params=
comment14.target=void\ testListIteratorSet()
comment14.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.set(E)}\ method.\n\ \n\ Invokes\ {@code\ set()}\ after\ calling\ {@code\ next()}\ and\ {@code\ previous()},\ ensuring\n\ the\ element\ is\ set\ in\ the\ correct\ place.\ Also\ tries\ to\ call\ {@code\ set(E)}\ without\ calling\ a\ required\n\ method\ before.\n
comment2.params=
comment2.target=void\ setUp()
comment3.params=
comment3.target=void\ testAddE()
comment3.text=\n\ Tests\ the\ {@link\ DoublingList\#add(E)}\ method.\n\ <ol>\n\ \ <li>Adds\ to\ an\ empty\ list.</li>\n\ \ <li>Adds\ to\ the\ end\ of\ a\ list.</li>\n\ \ <li>Attempts\ to\ add\ {@code\ null}\ to\ the\ list,\ catches\ the\ exception.</li>\n\ </ol>\n
comment4.params=
comment4.target=void\ testAddIntE()
comment4.text=\n\ Tests\ the\ {@link\ DoublingList\#add(int,\ E)}\ method.\n\ <ol>\n\ \ <li>Adds\ to\ an\ empty\ list.</li>\n\ \ <li>Adds\ to\ the\ end\ of\ a\ list.</li>\n\ \ <li>Adds\ to\ the\ front\ of\ a\ list.</li>\n\ \ <li>Adds\ to\ the\ middle\ of\ a\ list.</li>\n\ \ <li>Tests\ the\ scenarios\ from\ figures\ 4\ \u2014\ 9\ in\ the\ project\ spec.</li>\n\ \ <li>Attempts\ to\ add\ {@code\ null}\ to\ the\ list,\ catches\ the\ exception.</li>\n\ </ol>\n
comment5.params=
comment5.target=void\ testRemove()
comment5.text=\n\ Tests\ the\ {@link\ DoublingList\#remove(int)}\ method\:\n\ \n\ <ol>\n\ \ <li>Tests\ figure\ 10\ from\ the\ project\ spec\:\n\ \ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ <li>Deleting\ from\ the\ beginning\ of\ a\ node.</li>\n\ \ \ \ \ \ \ \ <li>Deleting\ from\ the\ end\ of\ a\ node.</li>\n\ \ \ \ \ \ </ul>\n\ \ </li>\n\ \ <li>Tests\ figure\ 11\ from\ the\ project\ spec\:\n\ \ \ \ \ \ <ul>\n\ \ \ \ \ \ \ \ <li>Deleting\ resulting\ in\ list\ resizing</li>\n\ \ \ \ \ \ </ul>\n\ \ </li>\n\ \ <li>Tests\ removing\ an\ out-of-bounds\ index\ (both\ {@code\ -1}\ and\ some\ value\ {@code\ >\=\ size})</li>\n\ </ol>\n
comment6.params=
comment6.target=void\ testSize()
comment6.text=\n\ Tests\ the\ {@link\ DoublingList\#size()}\ method.\n\ <ol>\n\ \ <li>Adds\ to\ a\ list\ and\ checks\ that\ the\ size\ has\ increased\ by\ 1</li>\n\ \ <li>Removes\ from\ a\ list\ and\ checks\ that\ the\ size\ has\ decreased\ by\ 1</li>\n\ </ol>\n
comment7.params=
comment7.target=void\ testToStringInternal()
comment7.text=\n\ Tests\ the\ {@link\ DoublingList\#toStringInternal()}\ method.\n\ Adds\ and\ removes\ various\ elements\ to/from\ the\ list\ and\ ensures\ that\ the\ list's\ structure\ is\ correctly\n\ represented\ by\ the\ returned\ String.\n
comment8.params=
comment8.target=void\ testToStringInternalListIterator()
comment8.text=\n\ Tests\ the\ {@link\ DoublingList\#toStringInternal(ListIterator)}\ method.\n\ Iterates\ through\ the\ list,\ ensuring\ that\ the\ cursor\ is\ correctly\ represented.\ Ensures\n\ these\ new\ elements\ are\ represented\ in\ the\ String\ representation\ returned.\n
comment9.params=
comment9.target=void\ testListIteratorNextAndHasNext()
comment9.text=\n\ Tests\ the\ {@code\ DoublingList.DoublingListIterator.next()}\ and\ the\n\ {@code\ DoublingList.DoublingListIterator.hasNext()}\ methods.\n\ \n\ Iterates\ through\ the\ list,\ checking\ that\ each\ call\ to\ {@code\ next()}\ returns\ the\ expected\ value\ from\ the\ list.\n\ Also\ ensures\ {@code\ hasNext()}\ is\ accurate.\ Checks\ for\ a\ {@code\ NoSuchElementException}\ when\ expected.\n
numComments=15
